name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Create test directories
      run: |
        mkdir -p tests/unit tests/integration
    
    - name: Create test files
      run: |
        # Create __init__.py files
        echo '"""Test package for Marbitz Battlebot."""' > tests/__init__.py
        echo '"""Unit tests for Marbitz Battlebot."""' > tests/unit/__init__.py
        echo '"""Integration tests for Marbitz Battlebot."""' > tests/integration/__init__.py
        
        # Create pytest.ini
        cat > pytest.ini << 'EOF'
        [pytest]
        testpaths = tests
        python_files = test_*.py
        python_classes = Test*
        python_functions = test_*
        addopts = --cov=marbitz_battlebot --cov-report=term-missing --cov-report=xml:coverage.xml
        asyncio_mode = auto
        EOF
        
        # Create conftest.py with basic fixtures
        cat > tests/conftest.py << 'EOF'
        """
        Pytest configuration and fixtures for Marbitz Battlebot tests.
        """
        
        import pytest
        from unittest.mock import MagicMock
        
        @pytest.fixture
        def mock_update():
            """Create a mock Update object for testing handlers."""
            update = MagicMock()
            update.effective_user.username = "test_user"
            update.effective_user.id = 12345
            update.message.chat_id = 67890
            update.message.text = "Test message"
            
            return update
        
        @pytest.fixture
        def mock_context():
            """Create a mock Context object for testing handlers."""
            context = MagicMock()
            context.user_data = {}
            context.args = []
            
            return context
        EOF
        
        # Create a basic test file
        cat > tests/unit/test_basic.py << 'EOF'
        """
        Basic tests for Marbitz Battlebot.
        """
        
        import pytest
        
        def test_import():
            """Test that the package can be imported."""
            import marbitz_battlebot
            assert marbitz_battlebot.__version__ == "1.0.0"
        EOF
    
    - name: Run tests
      run: |
        pytest --cov=marbitz_battlebot
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false